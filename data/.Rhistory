scale_x_continuous(label=scales::comma, trans='log2')+
theme_minimal()+
labs(title="GDP Per Capita and Life Expectancy Over 50+ Years",
size="Population",
fill="Continent",
x="GDP Per Capita",
y="Life Expectancy")+
guides(color="none")+
theme(plot.title = ggtext::element_markdown(size = 22, hjust =0.5, face = "bold"),
plot.subtitle = ggtext::element_markdown(size = 15, hjust =0.5, face = "bold")) +
transition_time(year)
animate(animation, renderer = gifski_renderer())
animate(animation, renderer = gifski_renderer(), fps = 10, duration = 30, end_pause = 50, height = 7, width = 10, units = "inches",
resolution = 200)
animate(animation, renderer = gifski_renderer(), fps = 10, duration = 30, end_pause = 50, height = 7, width = 10, units = "in",
resolution = 200)
animate(animation, renderer = gifski_renderer(), fps = 10, duration = 30, end_pause = 50, height = 7, width = 10, units = "in",
res = 200)
animation <- ggplot(data)+
geom_point(aes(x=gdpPercap, y=lifeExp, size=pop, color=continent, fill=continent, group=country),
shape=21, alpha=0.7)+
scale_size_continuous(label=scales::comma, range = c(1,20))+
scale_x_continuous(label=scales::comma, trans='log2')+
theme_minimal()+
labs(title="GDP Per Capita and Life Expectancy Over 50+ Years",
size="Population",
fill="Continent",
x="GDP Per Capita",
y="Life Expectancy",
subtitle="Year:{frame_time}")+
guides(color="none")+
theme(plot.title = ggtext::element_markdown(size = 22, hjust =0.5, face = "bold"),
plot.subtitle = ggtext::element_markdown(size = 15, hjust =0.5, face = "bold")) +
transition_time(year)
animate(animation, renderer = gifski_renderer(), fps = 2, duration = 30, end_pause = 50, height = 7, width = 10, units = "in",
res = 200)
install.packages("plotly")
library(plotly)
ggplotly(animation)
animation <- ggplot(data, aes(frame=year))+
geom_point(aes(x=gdpPercap, y=lifeExp, size=pop, color=continent, fill=continent, group=country, ids=country),
shape=21, alpha=0.7)+
scale_size_continuous(label=scales::comma, range = c(1,20))+
scale_x_continuous(label=scales::comma, trans='log2')+
theme_minimal()+
labs(title="GDP Per Capita and Life Expectancy Over 50+ Years",
size="Population",
fill="Continent",
x="GDP Per Capita",
y="Life Expectancy",
subtitle="Year: {frame_time}")+
guides(color="none")+
theme(plot.title = ggtext::element_markdown(size = 22, hjust =0.5, face = "bold"),
plot.subtitle = ggtext::element_markdown(size = 15, hjust =0.5, face = "bold")) +
transition_time(year)
ggplotly(animation)
library(ggplot2)
library(ggplot2)
library(gganimate)
library(ggtext)
library(gifski)
library(plotly)
data <- gapminder
data <- gapminder
library(gapminder)
data <- gapminder
animation <- ggplot(data, aes(frame=year))+
geom_point(aes(x=gdpPercap, y=lifeExp, size=pop, color=continent, fill=continent, group=country, ids=country),
shape=21, alpha=0.7)+
scale_size_continuous(label=scales::comma, range = c(1,20))+
scale_x_continuous(label=scales::comma, trans='log2')+
theme_minimal()+
labs(title="GDP Per Capita and Life Expectancy Over 50+ Years",
size="Population",
fill="Continent",
x="GDP Per Capita",
y="Life Expectancy",
subtitle="Year: {frame_time}")+
guides(color="none")+
theme(plot.title = ggtext::element_markdown(size = 22, hjust =0.5, face = "bold"),
plot.subtitle = ggtext::element_markdown(size = 15, hjust =0.5, face = "bold")) +
transition_time(year)
animate(animation, renderer = gifski_renderer(), fps = 2, duration = 30, end_pause = 50, height = 7, width = 10, units = "in",
res = 200)
ggplotly(animation)
x <- c(2.2, 1, -1.2, 2.9, 3)
y <- c(7, 2, 4, 9, 6)
# Fit a linear regression model
model <- lm(y ~ x)
# Predicted values from the regression model
y_pred <- predict(model)
ss <- sum((y - y_pred)^2)
x <- c(2.7, 4, 1.1, 3.9, 3)
y <- c(3, 3, 3, 4, 2)
# Fit a linear regression model
model <- lm(y ~ x)
# Predicted values from the regression model
y_pred <- predict(model)
x <- c(2.7, 4, 1.1, 3.9, 3)
y <- c(3, 3, 3, 4, 2)
# Fit a linear regression model
model <- lm(y ~ x)
# Predicted values from the regression model
y_pred <- predict(model)
ss <- sum((y - y_pred)^2)
calculate_sum_of_squares <- function(x, y, b0, b1) {
y_pred <- b0 + b1 * x
residuals <- y - y_pred
rss <- sum(residuals^2)
return(rss)
}
x <- c(8.6, 2, 3.5, 1.9, 4)
y <- c(2, 2, 2, 3, 3)
b0 <- 1.3
b1 <- 2.5
rss <- calculate_sum_of_squares(x, y, b0, b1)
print(paste("Residual sum of squares (RSS):", rss))
x <- c(6.9, 2, 2.7, 1.2, 2)
y <- c(1, 8, 6, 3, 6)
model <- lm(y ~ x)
y_pred <- predict(model)
ss <- sum((y - y_pred)^2)
print(paste("SS:", ss))
x <- c(5, 6, 2, 4, 3)
y <- c(34, 8.8, 30.5, 21, 29.5)
model <- lm(y ~ x)
coef(model)
x <- c(2, 1, 1.5, 2.9, 3)
y <- c(1, 1, 2, 2, 2)
model <- lm(y ~ x)
coef(model)
y_pred <- predict(model)
ss <- sum((y - y_pred)^2)
print(paste("SS:", ss))
x <- c(2, 1, 1.5, 2.9, 3)
x <- c(2, 1, 1.5, 2.9, 3)
y <- c(1, 1, 2, 2, 2)
model <- lm(y ~ x)
coef(model)
y_pred <- predict(model)
ss <- sum((y - y_pred)^2)
print(paste("SS:", ss))
theta2 <- ss / (length(x)-2)
print(paste("Theta squared: ", theta2))
source("~/Lecture Quiz 4.R")
import.packages(tidyverse)
import(tidyverse)
install.packages(tidyverse)
install.packages("tidyverse")
library(ggplot2)
data(airquality)
str(airquality)
# Basic scatter plot
ggplot(airquality, aes(x=Temp, y=Ozone)) + geom_point() + labs(title="Ozone vs Temperature", x="Temperature (F)", y="Ozone (pb)")
df <- data(airquality)
# Basic scatter plot
ggplot(df, aes(x=Temp, y=Ozone)) + geom_point() + labs(title="Ozone vs Temperature", x="Temperature (F)", y="Ozone (pb)")
df <- data(airquality)
# Basic scatter plot
ggplot(df, aes(x=Temp, y=Ozone)) + geom_point() + labs(title="Ozone vs Temperature", x="Temperature (F)", y="Ozone (pb)")
# Basic scatter plot
ggplot(airquality, aes(x=Temp, y=Ozone)) + geom_point() + labs(title="Ozone vs Temperature", x="Temperature (F)", y="Ozone (pb)")
# Missing data
df.clean <- na.omit(airquality)
ggplot(df.clean, aes(x=Temp, y=Ozone)) + geom_point() + geom_smooth(method = "lm", se=FALSE) + labs(title="Ozone vs Temperature", x="Temperature (F)", y="Ozone (pb)")
# Scatterplot matrix
ggplot(airquality_clean, aes(x = Temp, y = Ozone, color = factor(Month))) +
geom_point() +
facet_wrap(~Month) +
labs(title = "Ozone vs Temperature by Month",
x = "Temperature (°F)",
y = "Ozone (ppb)")
# Scatterplot matrix
ggplot(df.clean, aes(x = Temp, y = Ozone, color = factor(Month))) +
geom_point() +
facet_wrap(~Month) +
labs(title = "Ozone vs Temperature by Month",
x = "Temperature (°F)",
y = "Ozone (ppb)")
ggplot(airquality, aes(x = Date, y = Ozone)) +
geom_line() +
geom_smooth(method = "loess", se = FALSE) +
labs(title = "Ozone Levels Over Time",
x = "Date",
y = "Ozone (ppb)")
# Time series visualization
airquality$Date <- as.Date(paste("1973", airquality$Month, airquality$Day, sep="-"))
ggplot(airquality, aes(x = Date, y = Ozone)) +
geom_line() +
geom_smooth(method = "loess", se = FALSE) +
labs(title = "Ozone Levels Over Time",
x = "Date",
y = "Ozone (ppb)")
# Box plot
ggplot(airquality, aes(x = factor(Month), y = Ozone)) +
geom_boxplot(aes(fill = factor(Month))) +
labs(title = "Monthly Ozone Levels",
x = "Month",
y = "Ozone (ppb)")
# Three variables
ggplot(airquality_clean, aes(x = Wind, y = Ozone)) +
geom_point(aes(color = Temp)) +
scale_color_gradient(low = "blue", high = "red") +
labs(title = "Ozone vs Wind Speed",
x = "Wind Speed (mph)",
y = "Ozone (ppb)")
# Three variables
ggplot(df.clean, aes(x = Wind, y = Ozone)) +
geom_point(aes(color = Temp)) +
scale_color_gradient(low = "blue", high = "red") +
labs(title = "Ozone vs Wind Speed",
x = "Wind Speed (mph)",
y = "Ozone (ppb)")
setwd("~/")
data.2023 <- read.csv("C:\Users\natal\Downloads\time_use_2023.csv")
data.2023 <- read.csv("C:/Users/natal/Downloads/time_use_2023.csv")
View(data.2023)
View(data.2023)
final.df$status <- as.factor(final.df$status)
install.packages("sandwich")
install.packages("lmtest")
install.packages("xtable")
rm(list=ls())
library(sandwich) # heterokedasticity robust standard errors
library(lmtest) # coefficient testing in linear regressions
set.seed(11211) # fix the simulation randomness
n = 1000  # sample size
S= 10000  # number of simulations
SL = rep(0, S)
CRA = rep(0, S)
IRA = rep(0, S)
for ( i in 1:S){
Z = rnorm(n)      # generate Z
Y0 = -Z + rnorm(n) # conditional average value for Y(0) is -Z
Y1 =  Z + rnorm(n) # conditional average value for Y(1) is +Z
D = (runif(n)<.2)  # treatment indicator; only 20% get treated
D = as.numeric(D)
Y = Y1*D + Y0*(1-D)  # observed Y
Z = Z - mean(Z)   # demean Z
SL[i]  = lm(Y ~ D)$coef[2]  #simple diff-in-means
CRA[i] = lm(Y ~ D+ Z)$coef[2]  #classical regression adjustment
IRA[i] = lm(Y ~ D+ Z+ Z*D)$coef[2] #interactive regression adjustment
}
bias.SL  <-mean(SL-0)
bias.CRA <- mean(CRA-0)
bias.IRA <- mean(IRA-0)
print(paste("The finite sample bias of the SL is", round(bias.SL,5)))
print(paste("The finite sample bias of the CRA is", round(bias.CRA,5)))
print(paste("The finite sample bias of the IRA is", round(bias.IRA,5)))
var.SL  <-mean((SL-mean(SL))^2)
var.CRA <- mean((CRA-mean(CRA))^2)
var.IRA <- mean((IRA-mean(IRA))^2)
print(paste("The finite sample variance of the SL is", round(var.SL,5)))
print(paste("The finite sample variance of the CRA is", round(var.CRA,5)))
print(paste("The finite sample variance of the IRA is", round(var.IRA,5)))
mse.SL  <-mean((SL-0)^2)
mse.CRA <- mean((CRA-0)^2)
mse.IRA <- mean((IRA-0)^2)
print(paste("The finite sample mse of the SL is", round(mse.SL,5)))
print(paste("The finite sample mse of the CRA is", round(mse.CRA,5)))
print(paste("The finite sample mse of the IRA is", round(mse.IRA,5)))
set.seed(11211) # fix the simulation randomness
n = 100  # sample size
S= 10000  # number of simulations
SL = rep(0, S)
CRA = rep(0, S)
IRA = rep(0, S)
for ( i in 1:S){
Z = rnorm(n)      # generate Z
Y0 = -Z + rnorm(n) # conditional average value for Y(0) is -Z
Y1 =  Z + rnorm(n) # conditional average value for Y(1) is +Z
D = (runif(n)<.2)  # treatment indicator; only 20% get treated
D = as.numeric(D)
Y = Y1*D + Y0*(1-D)  # observed Y
Z = Z - mean(Z)   # demean Z
SL[i]  = lm(Y ~ D)$coef[2]  #simple diff-in-means
CRA[i] = lm(Y ~ D+ Z)$coef[2]  #classical regression adjustment
IRA[i] = lm(Y ~ D+ Z+ Z*D)$coef[2] #interactive regression adjustment
}
bias.SL  <-mean(SL-0)
bias.CRA <- mean(CRA-0)
bias.IRA <- mean(IRA-0)
print(paste("The finite sample bias of the SL is", round(bias.SL,5)))
print(paste("The finite sample bias of the CRA is", round(bias.CRA,5)))
print(paste("The finite sample bias of the IRA is", round(bias.IRA,5)))
var.SL  <-mean((SL-mean(SL))^2)
var.CRA <- mean((CRA-mean(CRA))^2)
var.IRA <- mean((IRA-mean(IRA))^2)
print(paste("The finite sample variance of the SL is", round(var.SL,5)))
print(paste("The finite sample variance of the CRA is", round(var.CRA,5)))
print(paste("The finite sample variance of the IRA is", round(var.IRA,5)))
mse.SL  <-mean((SL-0)^2)
mse.CRA <- mean((CRA-0)^2)
mse.IRA <- mean((IRA-0)^2)
print(paste("The finite sample mse of the SL is", round(mse.SL,5)))
print(paste("The finite sample mse of the CRA is", round(mse.CRA,5)))
print(paste("The finite sample mse of the IRA is", round(mse.IRA,5)))
# generate the simulated dataset
set.seed(12001)      # fix the simulation randomness
n = 1000             # sample size
Z = rnorm(n)         # generate Z
Y0 = -Z + rnorm(n)   # conditional average value of Y(0) response is -Z
Y1 = Z + rnorm(n)    # conditional average value of Y(1) is +Z
D = as.numeric((runif(n)<.2))   # treatment indicator; only 20% get treated
Y = Y1*D + Y0*(1-D)  # observed Y
Z = Z-mean(Z)        # demean Z
SL = lm(Y ~ D)        #simple diff-in-means
CRA = lm(Y ~ D+ Z)      #classical regression adjustment
IRA = lm(Y ~ D+ Z+ Z*D) #interactive regression adjustment
#objects SL, CRA and IRA stores many useful statistics in the completed regressions#
#might be easier to see them in Rstudio#
##report estimated coefficents
SL$coef
CRA$coef
IRA$coef
# report estimated coefficients with standard error
# we are interested in the coefficients on variable "D"
# Here, it is important to use robust standard errors"
coeftest(SL, vcov = vcovHC(SL, type="HC1"))
coeftest(CRA, vcov = vcovHC(CRA, type="HC1"))
coeftest(IRA, vcov = vcovHC(IRA, type="HC1"))
##Using classical (non-robust) standard errors  is misleading here.
summary(SL)
summary(CRA)
summary(IRA)
setwd("C:/Users/natal/OneDrive/Documents/GitHub/consumer-data/data")
library(tidyverse)
library(rvest)
library(stringr)
app.list <- read.csv("privacy-policy-list.csv") |>
select(-X)
get.text <- function(link, name, folder = "privacy_policies") {
tryCatch({
page <- read_html(link)
text <- page |> html_nodes("p") |> html_text()
text <- paste(text, collapse = "\n\n")
file.name <- paste0(folder, "/", make.names(name), ".txt")
writeLines(text, file.name)
}, error = function(e){
return(NA)
})
}
for(i in seq_len(nrow(app.list))){
get.text(app.list$Privacy.Policy.Link[i], app.list$App.Name[i])
}
View(app.list)
View(data.2023)
View(data.2023)
View(app.list)
policy.text.list <- list.files("data/privacy_policies", pattern="\\.txt", full.names=T)
app.list <- read.csv("privacy-policy-list.csv") |>
select(-X)
app.list <- read.csv("privacy-policy-list.csv") |>
select(-X)
policy.text.list <- list.files("privacy_policies", pattern="\\.txt", full.names=T)
policy.texts <- tibble(
file = policy.text.list,
App.Name = basename(file) |> str_remove("\\.txt$") |> str_trim(),
text = map_chr(policy.text.list, read_file)
)
View(policy.texts)
setwd("C:/Users/natal/OneDrive/Documents/GitHub/consumer-data/data")
library(tidyverse)
library(rvest)
library(stringr)
app.list <- read.csv("privacy-policy-list.csv") |>
select(-X)
get.text <- function(link, name, folder = "privacy_policies") {
tryCatch({
page <- read_html(link)
text <- page |>
html_nodes("p, div, section, article") |>
html_text(trim=TRUE) |>
text <- str_squish(text)
if (nchar(text) < 200) {
warning(paste("Empty text for: ", name))
return(FALSE)
}
file.name <- paste0(folder, "/", make.names(name), ".txt")
writeLines(text, file.name)
return(TRUE)
}, error = function(e){
return(FALSE)
})
}
setwd("C:/Users/natal/OneDrive/Documents/GitHub/consumer-data/data")
library(tidyverse)
library(rvest)
library(stringr)
app.list <- read.csv("privacy-policy-list.csv") |>
select(-X)
get.text <- function(link, name, folder = "privacy_policies") {
tryCatch({
page <- read_html(link)
text <- page |>
html_nodes("p, div, section, article") |>
html_text(trim=TRUE) |>
paste(collapse = " ")
text <- str_squish(text)
if (nchar(text) < 200) {
warning(paste("Empty text for: ", name))
return(FALSE)
}
file.name <- paste0(folder, "/", make.names(name), ".txt")
writeLines(text, file.name)
return(TRUE)
}, error = function(e){
return(FALSE)
})
}
for (i in seq_len(nrow(app.list))) {
app_name <- app.list$App.Name[i]
app_link <- app.list$Privacy.Policy.Link[i]
success <- get.text(app_link, app_name)
app.list$file_saved[i] <- success
}
View(app.list)
View(app.list)
app.list <- read.csv("privacy-policy-list.csv") |>
select(-X) |>
mutate(App.Name = str_replace_all(App.Name, "[^A-AZa-z\\s]", "")) |>
mutate(App.Name = str_squish(App.Name))
app.list <- read.csv("privacy-policy-list.csv") |>
select(-X) |>
mutate(App.Name = str_replace_all(App.Name, "[^\\p{L}\\s]", "")) |>
mutate(App.Name = str_squish(App.Name))
get.text <- function(link, name, folder = "privacy_policies") {
tryCatch({
page <- read_html(link)
text <- page |>
html_nodes("p, div, section, article") |>
html_text(trim=TRUE) |>
paste(collapse = " ")
text <- str_squish(text)
if (nchar(text) < 200) {
warning(paste("Empty text for: ", name))
return(FALSE)
}
file.name <- paste0(folder, "/", make.names(name), ".txt")
writeLines(text, file.name)
return(TRUE)
}, error = function(e){
warning(paste("File not saved for:", name))
return(FALSE)
})
}
for (i in seq_len(nrow(app.list))) {
app_name <- app.list$App.Name[i]
app_link <- app.list$Privacy.Policy.Link[i]
success <- get.text(app_link, app_name)
app.list$file_saved[i] <- success
}
View(get.text)
View(get.text)
warnings()
policy.text.list <- list.files("privacy_policies", pattern="\\.txt", full.names=T)
app.list <- read.csv("privacy-policy-list.csv") |>
select(-X) |>
mutate(App.Name = str_replace_all(App.Name, "[^\\p{L}\\s]", "")) |>
mutate(App.Name = str_squish(App.Name))
file.names <- list.files("privacy_policies", pattern="\\.txt", full.names=T)
policy.texts <- tibble(
file = file.names,
App.Name = basename(file) |> str_remove("\\.txt$") |> str_trim(),
text = map_chr(file.names, read_file)
)
View(policy.texts)
View(policy.texts)
View(policy.texts)
View(policy.texts)
get.text <- function(link, name, folder = "privacy_policies") {
tryCatch({
page <- read_html(link)
text <- page |>
html_nodes("p, section, article") |>
html_text(trim=TRUE) |>
paste(collapse = " ")
text <- str_squish(text)
if (nchar(text) < 200) {
warning(paste("Empty text for: ", name))
return(FALSE)
}
file.name <- paste0(folder, "/", make.names(name), ".txt")
writeLines(text, file.name)
return(TRUE)
}, error = function(e){
warning(paste("File not saved for:", name))
return(FALSE)
})
}
View(policy.texts)
app.list$file_saved <- FALSE
for (i in seq_len(nrow(app.list))) {
app_name <- app.list$App.Name[i]
app_link <- app.list$Privacy.Policy.Link[i]
success <- get.text(app_link, app_name)
app.list$file_saved[i] <- TRUE
}
app.list$file_saved <- FALSE
for (i in seq_len(nrow(app.list))) {
app_name <- app.list$App.Name[i]
app_link <- app.list$Privacy.Policy.Link[i]
success <- get.text(app_link, app_name)
app.list$file_saved[i] <- success
}
file.names <- list.files("privacy_policies", pattern="\\.txt", full.names=T)
policy.texts <- tibble(
file = file.names,
App.Name = basename(file) |> str_remove("\\.txt$") |> str_trim(),
text = map_chr(file.names, read_file)
)
View(policy.texts)
